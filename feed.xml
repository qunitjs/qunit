<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://qunitjs.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://qunitjs.com/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-04-01T07:08:17+00:00</updated><id>https://qunitjs.com/feed.xml</id><title type="html">QUnit</title><subtitle>The powerful, easy-to-use JavaScript testing framework.</subtitle><entry><title type="html">QUnit 2.24.1 Released: Bug fixes</title><link href="https://qunitjs.com/blog/2025/01/25/qunit-2-24-1/" rel="alternate" type="text/html" title="QUnit 2.24.1 Released: Bug fixes" /><published>2025-01-25T00:00:00+00:00</published><updated>2025-01-25T00:00:00+00:00</updated><id>https://qunitjs.com/blog/2025/01/25/qunit-2-24-1</id><content type="html" xml:base="https://qunitjs.com/blog/2025/01/25/qunit-2-24-1/"><![CDATA[<h3 id="fixed">Fixed</h3>

<ul>
  <li>CLI: Fix TAP compliance for actual/expected indent and skip/todo colors. <a href="https://github.com/qunitjs/qunit/commit/b4d48fc7107936b26d84b632b2c2782e368ea64c">b4d48fc710</a></li>
  <li>CLI: Fix TAP compliance for early errors (e.g. syntax error in test file). <a href="https://github.com/qunitjs/qunit/commit/01f7780bd8df3c21667e3920e0a4187cdf986c35">01f7780bd8</a></li>
  <li>Core: Add memory to late <a href="https://qunitjs.com/api/callbacks/QUnit.on/#the-error-event"><code class="language-plaintext highlighter-rouge">error</code> event</a> listeners, to improve reporting of early errors. <a href="https://github.com/qunitjs/qunit/commit/7c2f871ac339710845cee925207f5d6a62a8ad0e">7c2f871ac3</a></li>
</ul>

<h2 id="see-also">See also</h2>

<ul>
  <li><a href="https://github.com/qunitjs/qunit/releases/tag/2.24.1">Git tag: 2.24.1</a></li>
  <li><a href="/blog/2025/01/20/qunit-2-24-0/">QUnit 2.24.0 Released: Add memory to the ‚ÄúrunEnd‚Äù event</a></li>
</ul>]]></content><author><name>Timo Tijhof</name></author><category term="release" /><summary type="html"><![CDATA[More TAP compliance fixes, and memory for "error" events.]]></summary></entry><entry><title type="html">QUnit 2.24.0 Released: Cleaner traces and new CLI file extensions</title><link href="https://qunitjs.com/blog/2025/01/20/qunit-2-24-0/" rel="alternate" type="text/html" title="QUnit 2.24.0 Released: Cleaner traces and new CLI file extensions" /><published>2025-01-20T00:00:00+00:00</published><updated>2025-01-20T00:00:00+00:00</updated><id>https://qunitjs.com/blog/2025/01/20/qunit-2-24-0</id><content type="html" xml:base="https://qunitjs.com/blog/2025/01/20/qunit-2-24-0/"><![CDATA[<p>FYI:</p>
<ul>
  <li>‚ú® There is a new <a href="https://qunitjs.com/blog/">QUnit Blog</a>.
We‚Äôre also on <a href="https://fosstodon.org/@qunit">Mastodon</a> and <a href="https://bsky.app/profile/qunitjs.com">Bluesky</a>.</li>
  <li>üìó There are <a href="https://qunitjs.com/intro/">new Guides, Support, and Chat sections</a>. <br />Including best practices and examples for async tests, callbacks, and event-based code.</li>
</ul>

<h3 id="added">Added</h3>

<ul>
  <li>
    <p>CLI: Add <code class="language-plaintext highlighter-rouge">.mjs</code> and <code class="language-plaintext highlighter-rouge">.cjs</code> to the default file extensions when reading a test directory.</p>

    <p>These have been monitored by watch mode since QUnit 2.18, but were not loaded or executed
unless you passed them as individual files, or used your own glob like <code class="language-plaintext highlighter-rouge">test/*.{js,mjs,cjs}</code>.</p>

    <p>If you currently pass a directory to the QUnit CLI and have matching <code class="language-plaintext highlighter-rouge">.mjs</code> or <code class="language-plaintext highlighter-rouge">.cjs</code>
files that should not be executed, you can opt-out by passing <code class="language-plaintext highlighter-rouge">test/*.js</code> or
<code class="language-plaintext highlighter-rouge">test/**/*.js</code> explicitly instead of <code class="language-plaintext highlighter-rouge">test/</code>.</p>
  </li>
  <li>
    <p>CLI: Add stacktrace cleaning by omitting or greying out internal QUnit and Node.js frames in TAP reporter. <a href="https://github.com/qunitjs/qunit/pull/1795">#1795</a>. <a href="https://github.com/qunitjs/qunit/pull/1789">#1789</a></p>

    <p>Learn more about <a href="https://qunitjs.com/blog/2025/01/19/stacktrace-cleaner/">Cleaner stack traces</a> on the QUnit Blog.</p>
  </li>
  <li>Core: Add <a href="https://qunitjs.com/api/config/reporters/"><code class="language-plaintext highlighter-rouge">QUnit.config.reporters.tap</code></a> for enabling TAP via preconfig. <a href="https://github.com/qunitjs/qunit/issues/1711">#1711</a></li>
  <li>Core: Add memory to the <a href="https://qunitjs.com/api/callbacks/QUnit.on/#the-runend-event"><code class="language-plaintext highlighter-rouge">runEnd</code> event</a> to allow late listeners. This helps <a href="https://qunitjs.com/browser/#integrations">browser integrations</a> that only relay a summary. <a href="https://github.com/qunitjs/qunit/commit/27a33d15938a601716a81a638882a16c1bd7f2b9">27a33d1593</a></li>
</ul>

<h3 id="fixed">Fixed</h3>

<ul>
  <li>HTML Reporter: Fix unexpected pointer cursor on ‚ÄúSource:‚Äù label. <a href="https://github.com/qunitjs/qunit/commit/f8cce2bb06396561e0cdcbf58c4e83ddf7a1f27f">f8cce2bb06</a></li>
  <li>HTML Reporter: Faster ‚ÄúHide passed‚Äù toggling on large test suites. <a href="https://github.com/qunitjs/qunit/commit/b13ade0fd7c3baf4d0e68abe04f7d1609f686877">b13ade0fd7</a></li>
</ul>

<h2 id="see-also">See also</h2>

<ul>
  <li><a href="https://github.com/qunitjs/qunit/releases/tag/2.24.0">Git tag: 2.24.0</a></li>
  <li><a href="/blog/2025/01/19/stacktrace-cleaner/">Blog: Cleaner stack traces in QUnit</a></li>
</ul>]]></content><author><name>Timo Tijhof</name></author><category term="release" /><summary type="html"><![CDATA[New stacktrace cleaning, CLI file extensions, and various performance improvements and bug fixes.]]></summary></entry><entry><title type="html">Cleaner stack traces in QUnit</title><link href="https://qunitjs.com/blog/2025/01/19/stacktrace-cleaner/" rel="alternate" type="text/html" title="Cleaner stack traces in QUnit" /><published>2025-01-19T00:00:00+00:00</published><updated>2025-01-19T00:00:00+00:00</updated><id>https://qunitjs.com/blog/2025/01/19/stacktrace-cleaner</id><content type="html" xml:base="https://qunitjs.com/blog/2025/01/19/stacktrace-cleaner/"><![CDATA[<p>Stack traces shown in the QUnit CLI now remove or grey out internal calls by Node.js and QUnit.</p>

<h2 id="background">Background</h2>

<p>QUnit has always omitted its own source lines from stack traces when showing assertion failures. <sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">[1]</a></sup></p>

<p>This means we can report assertion failures with a stack that is just one level deep, pointing directly at your test file, to the line where the assertion happens.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">QUnit</span><span class="p">.</span><span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">banana</span><span class="dl">'</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">assert</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">actual</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">This is actual.</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">assert</span><span class="p">.</span><span class="nf">strictEqual</span><span class="p">(</span><span class="nx">actual</span><span class="p">,</span> <span class="dl">'</span><span class="s1">This is expected.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<div class="language-tap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gr">not ok</span> <span class="mi">2</span> banana
  ---
  actual  : This is actual.
  expected: This is expected.
  stack: |
        at /test/example.js:3:10
</code></pre></div></div>

<figure><img src="/resources/2025-stacktrace-assert-html.png" width="560" height="244" alt="Screenshot of QUnit test results in a web browser.
1) apple
2) banana
Expected: This is expected.
Result    This is actual.
Source:   @/test/example.js:3:10
" /></figure>

<p>The ‚Äúreal‚Äù stack trace is actually quite a bit longer, but we rebase it to become trace for your assertion. We remove lines before your assertion point (i.e. QUnit calling your test function), and remove any calls after that point (i.e. code inside an assert function).</p>

<p>This works well in browsers. But, when it comes to Node.js, we can do better!</p>

<h2 id="nodejs-runtime-internals">Node.js runtime internals</h2>

<p>Web browsers generally don‚Äôt expose their own internals to stack traces at all. For example, the internals of <code class="language-plaintext highlighter-rouge">fetch()</code>, or <code class="language-plaintext highlighter-rouge">setTimeout()</code>. <sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">[2]</a></sup> Node.js implements many of its internals in JavaScript, which are sometimes visible in a stack trace.</p>

<p>Let‚Äôs look a slow example test:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">QUnit</span><span class="p">.</span><span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">slow example</span><span class="dl">'</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">assert</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">assert</span><span class="p">.</span><span class="nf">timeout</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">done</span> <span class="o">=</span> <span class="nx">assert</span><span class="p">.</span><span class="k">async</span><span class="p">();</span>
  <span class="c1">// Never done()</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Status quo with QUnit 2.23.1:</p>

<div class="language-tap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">TAP version 13
</span><span class="gr">not ok</span> <span class="mi">1</span> slow example
  ---
  message: Test took longer than 100ms; test timed out.
  severity: failed
  stack: |
        at listOnTimeout (node:internal/timers:573:17)
        at process.processTimers (node:internal/timers:514:7)
  ...
<span class="kd">1..1</span><span class="c">
# pass 0
# skip 0
# todo 0
# fail 1
</span></code></pre></div></div>

<p>Notice the function calls inside the virtual <code class="language-plaintext highlighter-rouge">note:internal</code> module?</p>

<h3 id="hide-internal-frames">Hide internal frames</h3>

<p>While these functions are not called inside QUnit, we hide them because this timer is scheduled by QUnit. In this case, there are other stack frames and we can omit the trace entirely, for an even cleaner result. The same result in QUnit 2.24.0:</p>

<div class="language-tap highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">TAP version 13
</span><span class="gr">not ok</span> <span class="mi">1</span> slow example
  ---
  message: Test took longer than 100ms; test timed out.
  severity: failed
  ...
<span class="kd">1..1</span><span class="c">
# pass 0
# skip 0
# todo 0
# fail 1
</span></code></pre></div></div>

<h3 id="grey-out-nodejs-internals">Grey out Node.js internals</h3>

<p>Let‚Äôs look at a slightly more involved example, where your own code schedules a timer.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">QUnit</span><span class="p">.</span><span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">assert example</span><span class="dl">'</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">assert</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">done</span> <span class="o">=</span> <span class="nx">assert</span><span class="p">.</span><span class="k">async</span><span class="p">();</span>
  <span class="nf">setTimeout</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nf">false</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">);</span>
    <span class="nf">done</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>
<div class="figure-row">
<figure><img src="/resources/2025-stacktrace-assert-tap-before.png" width="463" height="241" alt="not ok 1 assert example. actual: true. expected: false. stack: at assert-example.js, at node:internal/timers, at node:internal/timers" /><figcaption>QUnit 2.23.0</figcaption></figure>
<figure><img src="/resources/2025-stacktrace-assert-tap-after.png" width="463" height="241" alt="" /><figcaption>QUnit 2.24.0</figcaption></figure>
</div>

<p>In this case, we can‚Äôt remove any frames. We should report errors from user code with the same level of detail as Node.js would, if you ran it outside a test. But, what we can do is grey out these <code class="language-plaintext highlighter-rouge">node:internal</code> frames, and draw attention to what is most likely of interest.</p>

<h2 id="uncaught-exceptions">Uncaught exceptions</h2>

<p>The above examples were about stack traces that originate from inside a test case.</p>

<p>We also format stack traces when reporting uncaught exceptions (a.k.a. ‚Äúglobal failure‚Äù). This includes errors that bubble up to <code class="language-plaintext highlighter-rouge">window.onerror</code> or <code class="language-plaintext highlighter-rouge">process.on('uncaughtException', ‚Ä¶)</code>, as received by <a href="/api/extension/QUnit.onUncaughtException/"><code class="language-plaintext highlighter-rouge">QUnit.onUncaughtException</code></a>.</p>

<p>As of QUnit 2.24 we now apply the same stack trace cleaner when formatting uncaught exceptions.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// example.js</span>
<span class="nx">QUnit</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</code></pre></div></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qunit example.js
</code></pre></div></div>

<div class="figure-row">
<figure><img src="/resources/2025-stacktrace-error-before.png" width="540" height="302" alt="Failed to load file example.js. TypeError: eventName must be a string. at qunit.js, at example.js, at node:internal/cjs/loader." /><figcaption>QUnit 2.23.1</figcaption></figure>
<figure><img src="/resources/2025-stacktrace-error-after.png" width="540" height="288" alt="Failed to load file example.js. TypeError: eventName must be a string. at example.js, at node:internal/cjs/loader." /><figcaption>QUnit 2.24.0</figcaption></figure>
</div>

<p>Notice the removal of the first <code class="language-plaintext highlighter-rouge">qunit.js</code> call, which lets the trace starts cleanly at <code class="language-plaintext highlighter-rouge">example.js</code>. The other internal calls are greyed out.</p>

<h3 id="trimming-traces">Trimming traces</h3>

<p>For assertion failures and uncaught exceptions alike, we only trim internal frames from the start or end of a stack. Removing frames from the middle would falsely present a call relationship that never happend, and would cause confusion among developers. Instead, frames we can‚Äôt trim, are greyed out instead. This is similar to Node.js‚Äôs own error formatter does.</p>

<h2 id="tap-reporter">TAP reporter</h2>

<p>These changes are applied to the TAP reporter, which the QUnit CLI uses by default. If you use the TAP reporter in browser environments, the same improvements apply there as well.</p>

<h2 id="see-also">See also</h2>

<ul>
  <li><a href="https://github.com/qunitjs/qunit/pull/1789">Exclude or grey internal frames in error stacks ¬∑ Pull Request #1789</a></li>
  <li><a href="https://github.com/qunitjs/qunit/pull/1795">Apply trace cleaning to assertion stack as well ¬∑ Pull Request #1795</a></li>
  <li><a href="https://github.com/qunitjs/qunit/pull/1794">Remove confusing ‚Äúexpected: undefined‚Äù under errors ¬∑ Pull Request #1794</a></li>
  <li><a href="https://github.com/qunitjs/qunit/pull/1801">Limit colors in TAP reporter to test names ¬∑ Pull Request #1801</a></li>
  <li><a href="/blog/2024/12/06/qunit-2-23-1/">QUnit 2.23.1 Release</a></li>
  <li><a href="/blog/2025/01/20/qunit-2-24-0/">QUnit 2.24.0 Release</a></li>
</ul>

<h2 id="footnotes">Footnotes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>This was released with QUnit 1.7 back in 2012 (<a href="https://github.com/qunitjs/qunit/commit/171ad8f042007e795766893a701d9315bdedeef1">commit</a>).¬†<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>This is in part because native browser code isn‚Äôt written in JavaScript, so the JavaScript stack is naturally limited to your code only.¬†<a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Timo Tijhof</name></author><category term="feature" /><summary type="html"><![CDATA[Stack traces shown in the QUnit CLI now remove or grey out internal calls by Node.js and QUnit.]]></summary></entry><entry><title type="html">QUnit 2.23.1 Released: Bug fixes</title><link href="https://qunitjs.com/blog/2024/12/06/qunit-2-23-1/" rel="alternate" type="text/html" title="QUnit 2.23.1 Released: Bug fixes" /><published>2024-12-06T00:00:00+00:00</published><updated>2024-12-06T00:00:00+00:00</updated><id>https://qunitjs.com/blog/2024/12/06/qunit-2-23-1</id><content type="html" xml:base="https://qunitjs.com/blog/2024/12/06/qunit-2-23-1/"><![CDATA[<p>Various improvements to the CLI and HTML Reporter.</p>

<h2 id="changelog">Changelog</h2>

<h3 id="fixed">Fixed</h3>

<ul>
  <li>CLI: Fix support for strict <a href="https://qunitjs.com/api/config/reporters/#tap">TAP parsers</a> by limiting colors to test names. <a href="https://github.com/qunitjs/qunit/pull/1801">#1801</a></li>
  <li>CLI: Fix confusing <a href="https://qunitjs.com/api/config/seed/"><code class="language-plaintext highlighter-rouge">--seed</code> option</a> eating the file argument. <a href="https://github.com/qunitjs/qunit/issues/1691">#1691</a></li>
  <li>CLI: Remove confusing <code class="language-plaintext highlighter-rouge">expected: undefined</code> under error messages in TAP reporter. <a href="https://github.com/qunitjs/qunit/pull/1794">#1794</a></li>
  <li>HTML Reporter: Fix broken ‚ÄúRerun without max depth‚Äù link. <a href="https://github.com/qunitjs/qunit/commit/da0c59e1016685ecd2b813bba914d33170e7bf98">da0c59e101</a> (see also <a href="https://github.com/qunitjs/qunit/commit/91db92dbc50bbbc41c5060a27e7aafd4e073e289">91db92dbc5</a>, <a href="https://github.com/qunitjs/qunit/commit/73c03cf27745e179396a6d7c9af011a20d3b9082">73c03cf277</a>)</li>
  <li>HTML Reporter: Fix <code class="language-plaintext highlighter-rouge">&lt;label&gt;</code> to wrap <code class="language-plaintext highlighter-rouge">&lt;select&gt;</code> for multi-value urlConfig item. <a href="https://github.com/qunitjs/qunit/pull/1773">#1773</a></li>
</ul>

<h2 id="see-also">See also</h2>

<ul>
  <li><a href="https://github.com/qunitjs/qunit/releases/tag/2.23.1">Git tag: 2.23.1</a></li>
</ul>]]></content><author><name>Timo Tijhof</name></author><category term="release" /><summary type="html"><![CDATA[Various improvements to the CLI and HTML Reporter.]]></summary></entry><entry><title type="html">QUnit 2.23.0 Released: Automatic labels</title><link href="https://qunitjs.com/blog/2024/12/03/qunit-2-23-0/" rel="alternate" type="text/html" title="QUnit 2.23.0 Released: Automatic labels" /><published>2024-12-03T00:00:00+00:00</published><updated>2024-12-03T00:00:00+00:00</updated><id>https://qunitjs.com/blog/2024/12/03/qunit-2-23-0</id><content type="html" xml:base="https://qunitjs.com/blog/2024/12/03/qunit-2-23-0/"><![CDATA[<p>Your data can now directly serve as its own label for test cases, because <a href="https://qunitjs.com/api/QUnit/test.each/"><code class="language-plaintext highlighter-rouge">QUnit.test.each()</code></a> now automatically assigns labels to each array item.</p>

<h2 id="changelog">Changelog</h2>

<h3 id="added">Added</h3>

<ul>
  <li>Core: Add automatic labels in <a href="https://qunitjs.com/api/QUnit/test.each/"><code class="language-plaintext highlighter-rouge">QUnit.test.each()</code></a> to simple array values. <a href="https://github.com/qunitjs/qunit/issues/1733">#1733</a></li>
</ul>

<h2 id="see-also">See also</h2>

<ul>
  <li><a href="https://github.com/qunitjs/qunit/releases/tag/2.23.0">Git tag: 2.23.0</a></li>
</ul>]]></content><author><name>Timo Tijhof</name></author><category term="release" /><summary type="html"><![CDATA[Your data can now directly serve as its own label for test cases, because QUnit.test.each() now automatically assigns labels to each array item.]]></summary></entry><entry><title type="html">QUnit 2.22.0 Released: Add test.if</title><link href="https://qunitjs.com/blog/2024/08/18/qunit-2-22-0/" rel="alternate" type="text/html" title="QUnit 2.22.0 Released: Add test.if" /><published>2024-08-18T00:00:00+00:00</published><updated>2024-08-18T00:00:00+00:00</updated><id>https://qunitjs.com/blog/2024/08/18/qunit-2-22-0</id><content type="html" xml:base="https://qunitjs.com/blog/2024/08/18/qunit-2-22-0/"><![CDATA[<p>Introduce <code class="language-plaintext highlighter-rouge">test.if()</code> and <code class="language-plaintext highlighter-rouge">module.if()</code> functions to facilitate conditional skipping.</p>

<h2 id="changelog">Changelog</h2>

<h3 id="added">Added</h3>

<ul>
  <li>Core: Add <a href="https://qunitjs.com/api/QUnit/test.if/"><code class="language-plaintext highlighter-rouge">QUnit.test.if()</code></a> and <code class="language-plaintext highlighter-rouge">QUnit.module.if()</code>. (Timo Tijhof) <a href="https://github.com/qunitjs/qunit/pull/1772">#1772</a></li>
</ul>

<h2 id="see-also">See also</h2>

<ul>
  <li><a href="https://github.com/qunitjs/qunit/releases/tag/2.22.0">Git tag: 2.22.0</a></li>
</ul>]]></content><author><name>Timo Tijhof</name></author><category term="release" /><summary type="html"><![CDATA[Introduce test.if() and module.if() functions to facilitate conditional skipping.]]></summary></entry><entry><title type="html">QUnit 2.21.1 Released: Bug fixes</title><link href="https://qunitjs.com/blog/2024/07/20/qunit-2-21-1/" rel="alternate" type="text/html" title="QUnit 2.21.1 Released: Bug fixes" /><published>2024-07-20T00:00:00+00:00</published><updated>2024-07-20T00:00:00+00:00</updated><id>https://qunitjs.com/blog/2024/07/20/qunit-2-21-1</id><content type="html" xml:base="https://qunitjs.com/blog/2024/07/20/qunit-2-21-1/"><![CDATA[<p>Various bug fixes, and improved stack trace formatting.</p>

<h2 id="changelog">Changelog</h2>

<h3 id="deprecated">Deprecated</h3>

<ul>
  <li>Assert: Add notice about upcoming change in how <a href="https://qunitjs.com/api/assert/expect/"><code class="language-plaintext highlighter-rouge">assert.expect()</code></a> counts steps for <code class="language-plaintext highlighter-rouge">assert.verifySteps()</code>. <a href="https://github.com/qunitjs/qunit/issues/1226">#1226</a></li>
</ul>

<h3 id="fixed">Fixed</h3>

<ul>
  <li>Core: Fix missing second frame in <code class="language-plaintext highlighter-rouge">QUnit.stack()</code> in Safari. <a href="https://github.com/qunitjs/qunit/pull/1776">#1776</a></li>
  <li>Core: Fix stacktrace cleaner to also support clean traces on URLs with host ports. <a href="https://github.com/qunitjs/qunit/issues/1769">#1769</a></li>
  <li>HTML Reporter: Fix reversed order after clicking ‚ÄúHide passed‚Äù. <a href="https://github.com/qunitjs/qunit/pull/1763">#1763</a></li>
  <li>HTML Reporter: Fix encoding of label for urlConfig multi-value item.</li>
</ul>

<h2 id="see-also">See also</h2>

<ul>
  <li><a href="https://github.com/qunitjs/qunit/releases/tag/2.21.1">Git tag: 2.21.1</a></li>
</ul>]]></content><author><name>Timo Tijhof</name></author><category term="release" /><summary type="html"><![CDATA[Various bug fixes, and improved stack trace formatting.]]></summary></entry><entry><title type="html">QUnit 2.21.0 Released: Add assert.closeTo</title><link href="https://qunitjs.com/blog/2024/05/29/qunit-2-21-0/" rel="alternate" type="text/html" title="QUnit 2.21.0 Released: Add assert.closeTo" /><published>2024-05-29T00:00:00+00:00</published><updated>2024-05-29T00:00:00+00:00</updated><id>https://qunitjs.com/blog/2024/05/29/qunit-2-21-0</id><content type="html" xml:base="https://qunitjs.com/blog/2024/05/29/qunit-2-21-0/"><![CDATA[<p>Introduce <a href="https://qunitjs.com/api/assert/closeTo/"><code class="language-plaintext highlighter-rouge">assert.closeTo()</code></a> to make number comparisons easy. Credit to James M. Greene for the original <a href="https://github.com/JamesMGreene/qunit-assert-close/">qunit-assert-close plugin</a>!</p>

<p>This release deprecates tests that don‚Äôt set a timeout but take longer than 3 seconds. See also <a href="https://qunitjs.com/api/config/testTimeout/#deprecated-no-timeout-set">How to set a timeout</a>.</p>

<h2 id="changelog">Changelog</h2>

<h3 id="added">Added</h3>

<ul>
  <li>Assert: Add <a href="https://qunitjs.com/api/assert/closeTo/"><code class="language-plaintext highlighter-rouge">assert.closeTo()</code></a> for float-friendly number comparisons. (Timo Tijhof) <a href="https://github.com/qunitjs/qunit/issues/1735">#1735</a></li>
  <li>Core: Add support for <a href="https://qunitjs.com/api/config/">flat preconfig</a> via environment/global variables. (Timo Tijhof)</li>
</ul>

<h3 id="deprecated">Deprecated</h3>

<ul>
  <li>Core: Deprecate <code class="language-plaintext highlighter-rouge">QUnit.load()</code> and document migration path at <a href="https://qunitjs.com/api/QUnit/load/">https://qunitjs.com/api/QUnit/load/</a>. (Timo Tijhof) <a href="https://github.com/qunitjs/qunit/pull/1743">#1743</a></li>
  <li>Core: Deprecate unset <a href="https://qunitjs.com/api/config/testTimeout/#deprecated-no-timeout-set">testTimeout</a> for tests taking longer than 3 seconds. (Timo Tijhof) <a href="https://github.com/qunitjs/qunit/issues/1483">#1483</a></li>
</ul>

<h2 id="see-also">See also</h2>

<ul>
  <li><a href="https://github.com/qunitjs/qunit/releases/tag/2.21.0">Git tag: 2.21.0</a></li>
</ul>]]></content><author><name>Timo Tijhof</name></author><category term="release" /><summary type="html"><![CDATA[Introduce assert.closeTo() to make number comparisons easy. Credit to James M. Greene for the original qunit-assert-close plugin!]]></summary></entry><entry><title type="html">QUnit 2.20.1 Released: Bug fixes</title><link href="https://qunitjs.com/blog/2024/02/15/qunit-2-20-1/" rel="alternate" type="text/html" title="QUnit 2.20.1 Released: Bug fixes" /><published>2024-02-15T00:00:00+00:00</published><updated>2024-02-15T00:00:00+00:00</updated><id>https://qunitjs.com/blog/2024/02/15/qunit-2-20-1</id><content type="html" xml:base="https://qunitjs.com/blog/2024/02/15/qunit-2-20-1/"><![CDATA[<p>Fix IE compat with <code class="language-plaintext highlighter-rouge">sinon.useFakeTimers</code>, and fix hanging <code class="language-plaintext highlighter-rouge">assert.async()</code>.</p>

<p>Welcome Timmy Willison as QUnit contributor!</p>

<h2 id="changelog">Changelog</h2>

<h3 id="fixed">Fixed</h3>

<ul>
  <li>Core: Fix compatibility with <code class="language-plaintext highlighter-rouge">sinon.useFakeTimers</code> in IE 10 and IE 11. (Timmy Willison) <a href="https://github.com/qunitjs/qunit/pull/1738">#1738</a></li>
  <li>Core: Fix hanging <code class="language-plaintext highlighter-rouge">assert.async()</code> after <code class="language-plaintext highlighter-rouge">assert.timeout()</code>. (Timo Tijhof) <a href="https://github.com/qunitjs/qunit/issues/1705">#1705</a></li>
</ul>

<h2 id="see-also">See also</h2>

<ul>
  <li><a href="https://github.com/qunitjs/qunit/releases/tag/2.20.1">Git tag: 2.20.1</a></li>
</ul>]]></content><author><name>Timo Tijhof</name></author><category term="release" /><summary type="html"><![CDATA[Fix IE compat with sinon.useFakeTimers, and fix hanging assert.async().]]></summary></entry><entry><title type="html">QUnit 2.20.0 Released: Improve diagnostics</title><link href="https://qunitjs.com/blog/2023/09/23/qunit-2-20-0/" rel="alternate" type="text/html" title="QUnit 2.20.0 Released: Improve diagnostics" /><published>2023-09-23T00:00:00+00:00</published><updated>2023-09-23T00:00:00+00:00</updated><id>https://qunitjs.com/blog/2023/09/23/qunit-2-20-0</id><content type="html" xml:base="https://qunitjs.com/blog/2023/09/23/qunit-2-20-0/"><![CDATA[<p>Add type check to <code class="language-plaintext highlighter-rouge">assert.async()</code> parameter, add <code class="language-plaintext highlighter-rouge">QUnit.reporters.perf</code>, and improve performance.</p>

<p>Welcome Zixin and Hareesh as first-time QUnit contributions!</p>

<h2 id="changelog">Changelog</h2>

<h3 id="added">Added</h3>

<ul>
  <li>Core: Add <code class="language-plaintext highlighter-rouge">QUnit.reporters.perf</code>. (Timo Tijhof) <a href="https://github.com/qunitjs/qunit/pull/1714">#1714</a></li>
</ul>

<h3 id="changed">Changed</h3>

<ul>
  <li>Assert: Add type check for <code class="language-plaintext highlighter-rouge">assert.async()</code> parameter. (Zixin Yin) <a href="https://github.com/qunitjs/qunit/issues/1721">#1721</a></li>
  <li>HTML Reporter: Remove units for 0 values in qunit.css. (Hareesh) <a href="https://github.com/qunitjs/qunit/pull/1715">#1715</a></li>
</ul>

<h3 id="fixed">Fixed</h3>

<ul>
  <li>Core: Faster <code class="language-plaintext highlighter-rouge">inArray</code> by using Array.prototype.includes when possible. (Izel Nakri)</li>
</ul>

<h2 id="see-also">See also</h2>

<ul>
  <li><a href="https://github.com/qunitjs/qunit/releases/tag/2.20.0">Git tag: 2.20.0</a></li>
</ul>]]></content><author><name>Timo Tijhof</name></author><category term="release" /><summary type="html"><![CDATA[Add type check to assert.async() parameter, add QUnit.reporters.perf, and improve performance.]]></summary></entry></feed>